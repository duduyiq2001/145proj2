
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000884  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d2  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fb  00000000  00000000  000011fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  000015fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000019b  00000000  00000000  00001a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  64:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <set_port>:
 */ 
#include "utility.h"


void set_port(char* portname, char portnum){
	*portname = *portname | 0x01 << portnum;
  6c:	fc 01       	movw	r30, r24
  6e:	40 81       	ld	r20, Z
  70:	21 e0       	ldi	r18, 0x01	; 1
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	02 c0       	rjmp	.+4      	; 0x7a <set_port+0xe>
  76:	22 0f       	add	r18, r18
  78:	33 1f       	adc	r19, r19
  7a:	6a 95       	dec	r22
  7c:	e2 f7       	brpl	.-8      	; 0x76 <set_port+0xa>
  7e:	24 2b       	or	r18, r20
  80:	20 83       	st	Z, r18
  82:	08 95       	ret

00000084 <clear_port>:
	
}

void clear_port(char* portname, char portnum){
  84:	fc 01       	movw	r30, r24
	*portname = *portname & (!(0x01 << portnum));
  86:	80 81       	ld	r24, Z
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <clear_port+0xe>
  8e:	22 0f       	add	r18, r18
  90:	33 1f       	adc	r19, r19
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <clear_port+0xa>
  96:	91 e0       	ldi	r25, 0x01	; 1
  98:	23 2b       	or	r18, r19
  9a:	09 f0       	breq	.+2      	; 0x9e <clear_port+0x1a>
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	98 23       	and	r25, r24
  a0:	90 83       	st	Z, r25
  a2:	08 95       	ret

000000a4 <get_pin>:
	
}

char get_pin(char* portname, char portnum){
	
	return *portname & 0x01 << portnum;
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	02 c0       	rjmp	.+4      	; 0xae <get_pin+0xa>
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	6a 95       	dec	r22
  b0:	e2 f7       	brpl	.-8      	; 0xaa <get_pin+0x6>
  b2:	fc 01       	movw	r30, r24
  b4:	80 81       	ld	r24, Z
  b6:	82 23       	and	r24, r18
  b8:	08 95       	ret

000000ba <is_pressed>:
	}

	return 0;
}

int is_pressed(int r, int c) {
  ba:	cf 93       	push	r28
  bc:	c6 2f       	mov	r28, r22

	DDRA = 1; // Set Data Direction Register A to output
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	9a bb       	out	0x1a, r25	; 26
	PORTA = 0; // Set all bits in Port A to low
  c2:	1b ba       	out	0x1b, r1	; 27

	// Set the row (r) to "0"
	clear_port(&PORTA, r+4);
  c4:	64 e0       	ldi	r22, 0x04	; 4
  c6:	68 0f       	add	r22, r24
  c8:	8b e3       	ldi	r24, 0x3B	; 59
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 42 00 	call	0x84	; 0x84 <clear_port>
	// Set the column (c) to "high"
	set_port(&PORTA,c);
  d0:	6c 2f       	mov	r22, r28
  d2:	8b e3       	ldi	r24, 0x3B	; 59
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 36 00 	call	0x6c	; 0x6c <set_port>
	
	DDRA = 0;
  da:	1a ba       	out	0x1a, r1	; 26
	if (/*GPIO @ c = 0*/  get_pin(PINA,c)) {    // Check if the corresponding pin is high
  dc:	89 b3       	in	r24, 0x19	; 25
  de:	6c 2f       	mov	r22, r28
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <get_pin>
  e6:	88 23       	and	r24, r24
  e8:	19 f0       	breq	.+6      	; 0xf0 <is_pressed+0x36>
		return 1;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <is_pressed+0x3a>
	}

	return 0;
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <get_key>:
#include "keypad.h"
#include <avr/io.h>
 
 
 
int get_key() {
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
	int i, j;

	for (i = 0; i < 4; i++) {
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	10 e0       	ldi	r17, 0x00	; 0
 104:	18 c0       	rjmp	.+48     	; 0x136 <get_key+0x3e>
		for (j = 0; j < 4; j++) {
			if (is_pressed(i, j)) {
 106:	be 01       	movw	r22, r28
 108:	c8 01       	movw	r24, r16
 10a:	0e 94 5d 00 	call	0xba	; 0xba <is_pressed>
 10e:	89 2b       	or	r24, r25
 110:	49 f0       	breq	.+18     	; 0x124 <get_key+0x2c>
				return i * 4 + j + 1;
 112:	c8 01       	movw	r24, r16
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	8c 0f       	add	r24, r28
 11e:	9d 1f       	adc	r25, r29
 120:	01 96       	adiw	r24, 0x01	; 1
 122:	0e c0       	rjmp	.+28     	; 0x140 <get_key+0x48>
 
int get_key() {
	int i, j;

	for (i = 0; i < 4; i++) {
		for (j = 0; j < 4; j++) {
 124:	21 96       	adiw	r28, 0x01	; 1
 126:	02 c0       	rjmp	.+4      	; 0x12c <get_key+0x34>
 128:	c0 e0       	ldi	r28, 0x00	; 0
 12a:	d0 e0       	ldi	r29, 0x00	; 0
 12c:	c4 30       	cpi	r28, 0x04	; 4
 12e:	d1 05       	cpc	r29, r1
 130:	54 f3       	brlt	.-44     	; 0x106 <get_key+0xe>
 
 
int get_key() {
	int i, j;

	for (i = 0; i < 4; i++) {
 132:	0f 5f       	subi	r16, 0xFF	; 255
 134:	1f 4f       	sbci	r17, 0xFF	; 255
 136:	04 30       	cpi	r16, 0x04	; 4
 138:	11 05       	cpc	r17, r1
 13a:	b4 f3       	brlt	.-20     	; 0x128 <get_key+0x30>
				return i * 4 + j + 1;
			}
		}
	}

	return 0;
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	08 95       	ret

0000014a <main>:
}

int main(void)
{
    /* Replace with your application code */
    DDRB = 1; 
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	87 bb       	out	0x17, r24	; 23
	PORTB = 0;
 14e:	18 ba       	out	0x18, r1	; 24
    while (1) 
    {
        int a = get_key();
 150:	0e 94 7c 00 	call	0xf8	; 0xf8 <get_key>
		//set_port(&PORTB, 0);
	//	PORTB = PORTB | (0x01 << 1);
	
		PORTB = 0x02;
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	88 bb       	out	0x18, r24	; 24
 158:	fb cf       	rjmp	.-10     	; 0x150 <main+0x6>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
