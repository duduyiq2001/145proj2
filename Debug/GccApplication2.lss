
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b07  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000735  00000000  00000000  00000def  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004eb  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d5  00000000  00000000  00001b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c5  00000000  00000000  00001ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000020be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  7a:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <test_keypad>:
	DateTime clock;
	init_dt(&clock);
	print_dt(&clock);
	while(1){
		advance_dt(&clock);
		print_dt(&clock);
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	87 bb       	out	0x17, r24	; 23
  86:	18 ba       	out	0x18, r1	; 24
  88:	02 c0       	rjmp	.+4      	; 0x8e <test_keypad+0xc>
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	88 bb       	out	0x18, r24	; 24
  8e:	63 e0       	ldi	r22, 0x03	; 3
  90:	70 e0       	ldi	r23, 0x00	; 0
  92:	83 e0       	ldi	r24, 0x03	; 3
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 8a 00 	call	0x114	; 0x114 <is_pressed>
  9a:	89 2b       	or	r24, r25
  9c:	b1 f7       	brne	.-20     	; 0x8a <test_keypad+0x8>
  9e:	18 ba       	out	0x18, r1	; 24
  a0:	f6 cf       	rjmp	.-20     	; 0x8e <test_keypad+0xc>

000000a2 <main>:
	}
}
int main(void)
{
   if(TESTKEY){
	   test_keypad();
  a2:	0e 94 41 00 	call	0x82	; 0x82 <test_keypad>

000000a6 <set_port>:
 */ 
#include "utility.h"
#include <avr/io.h>

void set_port(char* portname, char portnum){
	*portname = *portname | 0x01 << portnum;
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <set_port+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <set_port+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <clear_port>:
	
}

void clear_port(char* portname, char portnum){
  be:	fc 01       	movw	r30, r24
	*portname = *portname & (~(0x01 << portnum));
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <clear_port+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <clear_port+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <get_pin>:
	
}

char get_pin(char* portname, char portnum){
	
	return *portname & 0x01 << portnum;
  d8:	21 e0       	ldi	r18, 0x01	; 1
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <get_pin+0xa>
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <get_pin+0x6>
  e6:	fc 01       	movw	r30, r24
  e8:	80 81       	ld	r24, Z
}
  ea:	82 23       	and	r24, r18
  ec:	08 95       	ret

000000ee <wait_avr>:

void wait_avr(unsigned short msec){
	TCCR0 = 3;
  ee:	23 e0       	ldi	r18, 0x03	; 3
  f0:	23 bf       	out	0x33, r18	; 51
	while(msec --){
  f2:	09 c0       	rjmp	.+18     	; 0x106 <wait_avr+0x18>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ/64)*0.001);
  f4:	83 e8       	ldi	r24, 0x83	; 131
  f6:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
  f8:	88 b7       	in	r24, 0x38	; 56
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	88 bf       	out	0x38, r24	; 56
		while(!GET_BIT(TIFR, TOV0));
  fe:	08 b6       	in	r0, 0x38	; 56
 100:	00 fe       	sbrs	r0, 0
 102:	fd cf       	rjmp	.-6      	; 0xfe <wait_avr+0x10>
	return *portname & 0x01 << portnum;
}

void wait_avr(unsigned short msec){
	TCCR0 = 3;
	while(msec --){
 104:	c9 01       	movw	r24, r18
 106:	9c 01       	movw	r18, r24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	31 09       	sbc	r19, r1
 10c:	89 2b       	or	r24, r25
 10e:	91 f7       	brne	.-28     	; 0xf4 <wait_avr+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ/64)*0.001);
		SET_BIT(TIFR, TOV0);
		while(!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
 110:	13 be       	out	0x33, r1	; 51
 112:	08 95       	ret

00000114 <is_pressed>:
	}

	return 0;
}

int is_pressed(int r, int c) {
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29

	DDRA = 0x00; // Set Data Direction Register A to output
 11c:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00; // Set all bits in Port A to low
 11e:	1b ba       	out	0x1b, r1	; 27
     r = 3-r;
 120:	03 e0       	ldi	r16, 0x03	; 3
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	e8 01       	movw	r28, r16
 126:	c8 1b       	sub	r28, r24
 128:	d9 0b       	sbc	r29, r25
	 c = 3-c;
 12a:	06 1b       	sub	r16, r22
 12c:	17 0b       	sbc	r17, r23
	// Set the row (r) to "0"
	set_port(&DDRA, c);
 12e:	60 2f       	mov	r22, r16
 130:	8a e3       	ldi	r24, 0x3A	; 58
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 53 00 	call	0xa6	; 0xa6 <set_port>
	clear_port(&PORTA,c);
 138:	60 2f       	mov	r22, r16
 13a:	8b e3       	ldi	r24, 0x3B	; 59
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 5f 00 	call	0xbe	; 0xbe <clear_port>
	// Set the column (c) to "high"
	clear_port(&DDRA, r+4);
 142:	cc 5f       	subi	r28, 0xFC	; 252
 144:	6c 2f       	mov	r22, r28
 146:	8a e3       	ldi	r24, 0x3A	; 58
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	0e 94 5f 00 	call	0xbe	; 0xbe <clear_port>
	set_port(&PORTA,r+4);
 14e:	6c 2f       	mov	r22, r28
 150:	8b e3       	ldi	r24, 0x3B	; 59
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <set_port>
	wait_avr(10);
 158:	8a e0       	ldi	r24, 0x0A	; 10
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 77 00 	call	0xee	; 0xee <wait_avr>
	//DDRA = 0;
	if (/*GPIO @ c = 0*/  !get_pin(&PINA,r+4)) {    // Check if the corresponding pin is high
 160:	6c 2f       	mov	r22, r28
 162:	89 e3       	ldi	r24, 0x39	; 57
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 6c 00 	call	0xd8	; 0xd8 <get_pin>
 16a:	81 11       	cpse	r24, r1
 16c:	07 c0       	rjmp	.+14     	; 0x17c <is_pressed+0x68>
		wait_avr(10);
 16e:	8a e0       	ldi	r24, 0x0A	; 10
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 77 00 	call	0xee	; 0xee <wait_avr>
		return 1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <is_pressed+0x6c>
	}

	return 0;
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	0f 91       	pop	r16
 188:	08 95       	ret

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
